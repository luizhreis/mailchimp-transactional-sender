package main

import (
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/luizhreis/mailchimp-transactional-sender/pkg/mandrill"
)

func main() {
	fmt.Println("üîç DIAGN√ìSTICO: Erro 'unsigned' do Mandrill")
	fmt.Println("=" + strings.Repeat("=", 50))

	// Verificar API Key
	apiKey := os.Getenv("MANDRILL_API_KEY")
	if apiKey == "" {
		log.Fatal("‚ùå MANDRILL_API_KEY n√£o configurada")
	}
	fmt.Printf("‚úÖ API Key configurada: %s...\n", apiKey[:10])

	// Configurar cliente
	client := mandrill.NewClient(apiKey)

	// Email de teste com dom√≠nio comum
	email := mandrill.EmailRequest{
		To:          "teste@gmail.com", // Use um email real aqui
		Subject:     "Teste Diagn√≥stico - Unsigned",
		FromEmail:   "seu-email@gmail.com", // MUDE PARA SEU EMAIL REAL
		FromName:    "Teste Mandrill",
		HTMLContent: "<h1>Teste</h1><p>Este √© um teste para diagnosticar erro 'unsigned'.</p>",
		TextContent: "Teste para diagnosticar erro 'unsigned'.",
	}

	fmt.Println("\nüìß CONFIGURA√á√ÉO DO EMAIL:")
	fmt.Printf("   De: %s (%s)\n", email.FromEmail, email.FromName)
	fmt.Printf("   Para: %s\n", email.To)
	fmt.Printf("   Assunto: %s\n", email.Subject)

	fmt.Println("\nüö® VERIFICA√á√ïES IMPORTANTES:")

	// Verificar se est√° usando email de exemplo
	if strings.Contains(email.FromEmail, "seu-email@") || strings.Contains(email.FromEmail, "@example.com") {
		fmt.Println("‚ùå PROBLEMA: Voc√™ est√° usando um email de exemplo!")
		fmt.Println("   Mude 'seu-email@gmail.com' para seu email real.")
		fmt.Println("   Exemplo: 'joao.silva@gmail.com'")
		return
	}

	if strings.Contains(email.To, "teste@") || strings.Contains(email.To, "@example.com") {
		fmt.Println("‚ùå PROBLEMA: Voc√™ est√° usando um email de destino de exemplo!")
		fmt.Println("   Mude 'teste@gmail.com' para um email real que voc√™ possa verificar.")
		return
	}

	fmt.Println("‚úÖ Emails parecem v√°lidos")

	fmt.Println("\nüîÑ ENVIANDO EMAIL...")

	// Tentar enviar
	err := client.SendEmail(email)
	if err != nil {
		fmt.Printf("\n‚ùå ERRO ENCONTRADO:\n%v\n", err)

		if strings.Contains(err.Error(), "unsigned") {
			fmt.Println("\nüéØ DIAGN√ìSTICO ESPEC√çFICO PARA 'UNSIGNED':")
			fmt.Println("=" + strings.Repeat("=", 50))
			fmt.Println("Este erro significa que o Mandrill n√£o reconhece seu dom√≠nio de envio.")
			fmt.Println("")
			fmt.Println("üìã SOLU√á√ïES EM ORDEM DE PRIORIDADE:")
			fmt.Println("")
			fmt.Println("1Ô∏è‚É£ SOLU√á√ÉO IMEDIATA - Use Gmail/Yahoo:")
			fmt.Printf("   - Mude FromEmail para um email @gmail.com/@yahoo.com que voc√™ possui\n")
			fmt.Printf("   - Exemplo: se voc√™ tem joao@gmail.com, use este email\n")
			fmt.Println("")
			fmt.Println("2Ô∏è‚É£ VERIFICAR DOM√çNIO NO MANDRILL:")
			fmt.Println("   - Acesse: https://mandrillapp.com/settings/sending-domains")
			fmt.Println("   - Clique em 'Add Domain'")
			fmt.Printf("   - Adicione o dom√≠nio: %s\n", getDomainFromEmail(email.FromEmail))
			fmt.Println("   - Siga as instru√ß√µes de verifica√ß√£o DNS")
			fmt.Println("")
			fmt.Println("3Ô∏è‚É£ VERIFICAR CONFIGURA√á√ïES:")
			fmt.Println("   - Acesse: https://mandrillapp.com/settings")
			fmt.Println("   - Verifique se n√£o h√° restri√ß√µes ativas")
			fmt.Println("   - Confirme que sua conta est√° ativa")
			fmt.Println("")
			fmt.Println("4Ô∏è‚É£ TESTAR COM DOM√çNIO VERIFICADO:")
			fmt.Println("   - Ap√≥s verificar o dom√≠nio, teste novamente")
			fmt.Println("   - Aguarde at√© 24h para propaga√ß√£o DNS")
		}
		return
	}

	fmt.Println("‚úÖ Email enviado com sucesso!")
	fmt.Println("üéâ Nenhum erro 'unsigned' encontrado.")
}

func getDomainFromEmail(email string) string {
	parts := strings.Split(email, "@")
	if len(parts) > 1 {
		return parts[1]
	}
	return "seu-dominio.com"
}
